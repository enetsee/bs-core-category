// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Monad$CoreCategory = require("./Monad.bs.js");
var EitherBase$CoreCategory = require("./EitherBase.bs.js");
var Applicative$CoreCategory = require("./Applicative.bs.js");

var map = /* `Custom */[
  -198771759,
  EitherBase$CoreCategory.map
];

function bind(t, f) {
  if (t.tag) {
    return /* Second */Block.__(1, [t[0]]);
  } else {
    return Curry._1(f, t[0]);
  }
}

var include = Monad$CoreCategory.Make2({
      $$return: EitherBase$CoreCategory.first,
      bind: bind,
      apply: /* Using_bind */301992440,
      map: map,
      liftA2: /* Using_apply */524559571,
      liftA3: /* Using_apply */524559571,
      discardFirst: /* Using_apply */524559571,
      discardSecond: /* Using_apply */524559571,
      select: /* Using_bind */301992440
    });

function Make3(F) {
  var traverse = function (t, f) {
    if (t.tag) {
      return Curry._1(F.$$return, /* Second */Block.__(1, [t[0]]));
    } else {
      var func = F.map;
      return (function (param) {
                  return Curry._2(func, param, EitherBase$CoreCategory.first);
                })(Curry._1(f, t[0]));
    }
  };
  return {
          traverse: traverse
        };
}

function Make2(F) {
  var F$1 = Applicative$CoreCategory.S2_to_S3(F);
  var traverse = function (t, f) {
    if (t.tag) {
      return Curry._1(F$1.$$return, /* Second */Block.__(1, [t[0]]));
    } else {
      var func = F$1.map;
      return (function (param) {
                  return Curry._2(func, param, EitherBase$CoreCategory.first);
                })(Curry._1(f, t[0]));
    }
  };
  return {
          traverse: traverse
        };
}

function Make(F) {
  var F$1 = Applicative$CoreCategory.S_to_S2(F);
  var F$2 = Applicative$CoreCategory.S2_to_S3(F$1);
  var traverse = function (t, f) {
    if (t.tag) {
      return Curry._1(F$2.$$return, /* Second */Block.__(1, [t[0]]));
    } else {
      var func = F$2.map;
      return (function (param) {
                  return Curry._2(func, param, EitherBase$CoreCategory.first);
                })(Curry._1(f, t[0]));
    }
  };
  return {
          traverse: traverse
        };
}

var Traversable = {
  Make3: Make3,
  Make2: Make2,
  Make: Make
};

var first = EitherBase$CoreCategory.first;

var second = EitherBase$CoreCategory.second;

var either = EitherBase$CoreCategory.either;

var bimap = EitherBase$CoreCategory.bimap;

var select = include.select;

var $$void = include.$$void;

var Functor_infix = include.Functor_infix;

var $less$$great = include.$less$$great;

var $less$amp$great = include.$less$amp$great;

var $less$ = include.$less$;

var $$great = include.$$great;

var $$return = include.$$return;

var apply = include.apply;

var discardFirst = include.discardFirst;

var discardSecond = include.discardSecond;

var liftA2 = include.liftA2;

var liftA3 = include.liftA3;

var map$1 = include.map;

var unit = include.unit;

var merge = include.merge;

var Applicative_infix = include.Applicative_infix;

var $less$star$great = include.$less$star$great;

var $star$great = include.$star$great;

var $less$star = include.$less$star;

var $star$star = include.$star$star;

var Selective_infix = include.Selective_infix;

var $less$star$question = include.$less$star$question;

var $less$pipe$pipe$great = include.$less$pipe$pipe$great;

var $less$amp$amp$great = include.$less$amp$amp$great;

var orS = include.orS;

var andS = include.andS;

var whenS = include.whenS;

var branch = include.branch;

var ifS = include.ifS;

var fromOptionS = include.fromOptionS;

var anyS = include.anyS;

var allS = include.allS;

var whileS = include.whileS;

var bind$1 = include.bind;

var Monad_infix = include.Monad_infix;

var $great$great$eq = include.$great$great$eq;

var $great$great$tilde = include.$great$great$tilde;

var $great$eq$great = include.$great$eq$great;

var join = include.join;

var forever = include.forever;

var sequenceM = include.sequenceM;

var mapM = include.mapM;

var mapM_ = include.mapM_;

exports.first = first;
exports.second = second;
exports.either = either;
exports.bimap = bimap;
exports.select = select;
exports.$$void = $$void;
exports.Functor_infix = Functor_infix;
exports.$less$$great = $less$$great;
exports.$less$amp$great = $less$amp$great;
exports.$less$ = $less$;
exports.$$great = $$great;
exports.$$return = $$return;
exports.apply = apply;
exports.discardFirst = discardFirst;
exports.discardSecond = discardSecond;
exports.liftA2 = liftA2;
exports.liftA3 = liftA3;
exports.map = map$1;
exports.unit = unit;
exports.merge = merge;
exports.Applicative_infix = Applicative_infix;
exports.$less$star$great = $less$star$great;
exports.$star$great = $star$great;
exports.$less$star = $less$star;
exports.$star$star = $star$star;
exports.Selective_infix = Selective_infix;
exports.$less$star$question = $less$star$question;
exports.$less$pipe$pipe$great = $less$pipe$pipe$great;
exports.$less$amp$amp$great = $less$amp$amp$great;
exports.orS = orS;
exports.andS = andS;
exports.whenS = whenS;
exports.branch = branch;
exports.ifS = ifS;
exports.fromOptionS = fromOptionS;
exports.anyS = anyS;
exports.allS = allS;
exports.whileS = whileS;
exports.bind = bind$1;
exports.Monad_infix = Monad_infix;
exports.$great$great$eq = $great$great$eq;
exports.$great$great$tilde = $great$great$tilde;
exports.$great$eq$great = $great$eq$great;
exports.join = join;
exports.forever = forever;
exports.sequenceM = sequenceM;
exports.mapM = mapM;
exports.mapM_ = mapM_;
exports.Traversable = Traversable;
/* include Not a pure module */
