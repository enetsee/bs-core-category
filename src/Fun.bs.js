// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Functor$CoreCategory = require("./Functor.bs.js");

function id(x) {
  return x;
}

function $$const(x, param) {
  return x;
}

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function curry(f, x, y) {
  return Curry._1(f, /* tuple */[
              x,
              y
            ]);
}

function uncurry(f, param) {
  return Curry._2(f, param[0], param[1]);
}

function flip(f, y, x) {
  return Curry._2(f, x, y);
}

function $less$less(f, g) {
  return (function (param) {
      return Curry._1(f, Curry._1(g, param));
    });
}

function $great$great(g, f) {
  return (function (param) {
      return Curry._1(f, Curry._1(g, param));
    });
}

var Fun_infix = {
  $less$less: $less$less,
  $great$great: $great$great
};

function map(x, f) {
  return (function (param) {
      return Curry._1(f, Curry._1(x, param));
    });
}

var include = Functor$CoreCategory.Make2({
      map: map
    });

var map$1 = include.map;

var $$void = include.$$void;

var Functor_infix = include.Functor_infix;

var $less$$great = include.$less$$great;

var $less$amp$great = include.$less$amp$great;

var $less$ = include.$less$;

var $$great = include.$$great;

exports.id = id;
exports.$$const = $$const;
exports.compose = compose;
exports.curry = curry;
exports.uncurry = uncurry;
exports.flip = flip;
exports.Fun_infix = Fun_infix;
exports.$less$less = $less$less;
exports.$great$great = $great$great;
exports.map = map$1;
exports.$$void = $$void;
exports.Functor_infix = Functor_infix;
exports.$less$$great = $less$$great;
exports.$less$amp$great = $less$amp$great;
exports.$less$ = $less$;
exports.$$great = $$great;
/* include Not a pure module */
