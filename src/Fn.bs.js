// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Closed$CoreCategory = require("./Closed.bs.js");
var Functor$CoreCategory = require("./Functor.bs.js");
var Profunctor$CoreCategory = require("./Profunctor.bs.js");
var Contravariant$CoreCategory = require("./Contravariant.bs.js");

function $$const(x, param) {
  return x;
}

function flip(f, y, x) {
  return Curry._2(f, x, y);
}

function id(x) {
  return x;
}

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function exl(param) {
  return param[0];
}

function exr(param) {
  return param[1];
}

function product(f, g, x) {
  return /* tuple */[
          Curry._1(f, x),
          Curry._1(g, x)
        ];
}

function ap(param) {
  return Curry._1(param[0], param[1]);
}

function uncurry(f, param) {
  return Curry._2(f, param[0], param[1]);
}

function curry(f, x, y) {
  return Curry._1(f, /* tuple */[
              x,
              y
            ]);
}

var include = Closed$CoreCategory.Make2({
      id: id,
      compose: compose,
      product: product,
      exl: exl,
      exr: exr,
      ap: ap,
      curry: curry,
      uncurry: uncurry
    });

var compose$1 = include.compose;

function map(x, f) {
  return Curry._2(compose$1, f, x);
}

var include$1 = Functor$CoreCategory.Make2({
      map: map
    });

var map$1 = include$1.map;

var cmap = Curry.__2(compose$1);

var include$2 = Contravariant$CoreCategory.Make2({
      cmap: cmap
    });

var cmap$1 = include$2.cmap;

var cmapFirst = /* `Custom */[
  -198771759,
  cmap$1
];

var mapSecond = /* `Custom */[
  -198771759,
  map$1
];

function dimap(t, first, second) {
  return Curry._3(compose$1, (function (param) {
                return Curry._2(cmap$1, param, first);
              }), (function (param) {
                return Curry._2(map$1, param, second);
              }), t);
}

var include$3 = Profunctor$CoreCategory.MakeCustom2({
      dimap: dimap,
      cmapFirst: cmapFirst,
      mapSecond: mapSecond
    });

var ap$1 = include.ap;

var curry$1 = include.curry;

var uncurry$1 = include.uncurry;

var id$1 = include.id;

var CategoryInfix = include.CategoryInfix;

var $less$less = include.$less$less;

var $great$great = include.$great$great;

var product$1 = include.product;

var exl$1 = include.exl;

var exr$1 = include.exr;

var CartesianInfix = include.CartesianInfix;

var $pipe$star$pipe = include.$pipe$star$pipe;

var replace = include$1.replace;

var $$void = include$1.$$void;

var FunctorInfix = include$1.FunctorInfix;

var $less$$great = include$1.$less$$great;

var $less$amp$great = include$1.$less$amp$great;

var $less$ = include$1.$less$;

var $$great = include$1.$$great;

var creplace = include$2.creplace;

var ContravariantInfix = include$2.ContravariantInfix;

var $great$$less = include$2.$great$$less;

var $great$ = include$2.$great$;

var $great$$$less = include$2.$great$$$less;

var $$less = include$2.$$less;

var dimap$1 = include$3.dimap;

var cmapFirst$1 = include$3.cmapFirst;

var mapSecond$1 = include$3.mapSecond;

exports.$$const = $$const;
exports.flip = flip;
exports.ap = ap$1;
exports.curry = curry$1;
exports.uncurry = uncurry$1;
exports.id = id$1;
exports.compose = compose$1;
exports.CategoryInfix = CategoryInfix;
exports.$less$less = $less$less;
exports.$great$great = $great$great;
exports.product = product$1;
exports.exl = exl$1;
exports.exr = exr$1;
exports.CartesianInfix = CartesianInfix;
exports.$pipe$star$pipe = $pipe$star$pipe;
exports.map = map$1;
exports.replace = replace;
exports.$$void = $$void;
exports.FunctorInfix = FunctorInfix;
exports.$less$$great = $less$$great;
exports.$less$amp$great = $less$amp$great;
exports.$less$ = $less$;
exports.$$great = $$great;
exports.cmap = cmap$1;
exports.creplace = creplace;
exports.ContravariantInfix = ContravariantInfix;
exports.$great$$less = $great$$less;
exports.$great$ = $great$;
exports.$great$$$less = $great$$$less;
exports.$$less = $$less;
exports.dimap = dimap$1;
exports.cmapFirst = cmapFirst$1;
exports.mapSecond = mapSecond$1;
/* include Not a pure module */
