// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Selective$CoreCategory = require("./Selective.bs.js");

function Make($$Error) {
  var success = function (x) {
    return /* Success */Block.__(0, [x]);
  };
  var failure = function (x) {
    return /* Failure */Block.__(1, [x]);
  };
  var map_ = function (t, f) {
    if (t.tag) {
      return /* Failure */Block.__(1, [t[0]]);
    } else {
      return /* Success */Block.__(0, [Curry._1(f, t[0])]);
    }
  };
  var map = /* `Custom */[
    -198771759,
    map_
  ];
  var $$return = function (x) {
    return /* Success */Block.__(0, [x]);
  };
  var apply = function (x, f) {
    if (f.tag) {
      var e1 = f[0];
      if (x.tag) {
        return /* Failure */Block.__(1, [Curry._2($$Error.combine, e1, x[0])]);
      } else {
        return /* Failure */Block.__(1, [e1]);
      }
    } else if (x.tag) {
      return /* Failure */Block.__(1, [x[0]]);
    } else {
      return /* Success */Block.__(0, [Curry._1(f[0], x[0])]);
    }
  };
  var select = function (x, f) {
    if (x.tag) {
      return /* Failure */Block.__(1, [x[0]]);
    } else {
      var match = x[0];
      if (match.tag) {
        return /* Success */Block.__(0, [match[0]]);
      } else {
        var a = match[0];
        return map_(f, (function (param) {
                      return Curry._1(param, a);
                    }));
      }
    }
  };
  var include = Selective$CoreCategory.Make({
        $$return: $$return,
        apply: apply,
        map: map,
        liftA2: /* Using_apply */524559571,
        liftA3: /* Using_apply */524559571,
        discardFirst: /* Using_apply */524559571,
        discardSecond: /* Using_apply */524559571,
        select: select
      });
  return {
          select: include.select,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: include.$$return,
          apply: include.apply,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          map: include.map,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Selective_infix: include.Selective_infix,
          $less$star$question: include.$less$star$question,
          $less$pipe$pipe$great: include.$less$pipe$pipe$great,
          $less$amp$amp$great: include.$less$amp$amp$great,
          orS: include.orS,
          andS: include.andS,
          whenS: include.whenS,
          branch: include.branch,
          ifS: include.ifS,
          fromOptionS: include.fromOptionS,
          anyS: include.anyS,
          allS: include.allS,
          whileS: include.whileS,
          success: success,
          failure: failure
        };
}

exports.Make = Make;
/* Selective-CoreCategory Not a pure module */
