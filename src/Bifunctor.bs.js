// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function S2_to_S3(X) {
  return X;
}

function S3_to_S2(X) {
  return X;
}

function MakeCustom3(X) {
  var bimap = X.bimap;
  var match = X.mapFirst;
  var mapFirst;
  var exit = 0;
  if (typeof match === "number" || match[0] !== -198771759) {
    exit = 1;
  } else {
    mapFirst = match[1];
  }
  if (exit === 1) {
    mapFirst = (function (t, f) {
        return Curry._3(bimap, t, f, (function (x) {
                      return x;
                    }));
      });
  }
  var match$1 = X.mapSecond;
  var mapSecond;
  var exit$1 = 0;
  if (typeof match$1 === "number" || match$1[0] !== -198771759) {
    exit$1 = 1;
  } else {
    mapSecond = match$1[1];
  }
  if (exit$1 === 1) {
    mapSecond = (function (t, f) {
        return Curry._3(bimap, t, (function (x) {
                      return x;
                    }), f);
      });
  }
  return {
          bimap: bimap,
          mapFirst: mapFirst,
          mapSecond: mapSecond
        };
}

function MakeCustom2(X) {
  var bimap = X.bimap;
  var mapFirst = X.mapFirst;
  var mapSecond = X.mapSecond;
  var mapFirst$1;
  var exit = 0;
  if (typeof mapFirst === "number" || mapFirst[0] !== -198771759) {
    exit = 1;
  } else {
    mapFirst$1 = mapFirst[1];
  }
  if (exit === 1) {
    mapFirst$1 = (function (t, f) {
        return Curry._3(bimap, t, f, (function (x) {
                      return x;
                    }));
      });
  }
  var mapSecond$1;
  var exit$1 = 0;
  if (typeof mapSecond === "number" || mapSecond[0] !== -198771759) {
    exit$1 = 1;
  } else {
    mapSecond$1 = mapSecond[1];
  }
  if (exit$1 === 1) {
    mapSecond$1 = (function (t, f) {
        return Curry._3(bimap, t, (function (x) {
                      return x;
                    }), f);
      });
  }
  return {
          bimap: bimap,
          mapFirst: mapFirst$1,
          mapSecond: mapSecond$1
        };
}

function Make3(X) {
  var bimap = X.bimap;
  var mapFirst;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    mapFirst = (function (t, f) {
        return Curry._3(bimap, t, f, (function (x) {
                      return x;
                    }));
      });
  }
  var mapSecond;
  var exit$1 = 0;
  exit$1 = 1;
  if (exit$1 === 1) {
    mapSecond = (function (t, f) {
        return Curry._3(bimap, t, (function (x) {
                      return x;
                    }), f);
      });
  }
  return {
          bimap: bimap,
          mapFirst: mapFirst,
          mapSecond: mapSecond
        };
}

function Make2(X) {
  var bimap = X.bimap;
  var mapFirst;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    mapFirst = (function (t, f) {
        return Curry._3(bimap, t, f, (function (x) {
                      return x;
                    }));
      });
  }
  var mapSecond;
  var exit$1 = 0;
  exit$1 = 1;
  if (exit$1 === 1) {
    mapSecond = (function (t, f) {
        return Curry._3(bimap, t, (function (x) {
                      return x;
                    }), f);
      });
  }
  return {
          bimap: bimap,
          mapFirst: mapFirst,
          mapSecond: mapSecond
        };
}

exports.S2_to_S3 = S2_to_S3;
exports.S3_to_S2 = S3_to_S2;
exports.MakeCustom2 = MakeCustom2;
exports.MakeCustom3 = MakeCustom3;
exports.Make2 = Make2;
exports.Make3 = Make3;
/* No side effect */
