// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Apply$CoreCategory = require("./Apply.bs.js");
var Functor$CoreCategory = require("./Functor.bs.js");

function S1_to_S2(X) {
  return {
          map: X.map,
          replace: X.replace,
          $$void: X.$$void,
          FunctorInfix: X.FunctorInfix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          apply: X.apply,
          applyFirst: X.applyFirst,
          applySecond: X.applySecond,
          liftA2: X.liftA2,
          ApplyInfix: X.ApplyInfix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          liftA3: X.liftA3,
          liftA4: X.liftA4,
          liftA5: X.liftA5,
          merge: X.merge,
          pure: X.pure,
          when_: X.when_,
          unless: X.unless
        };
}

function S2_to_S1(X) {
  return {
          map: X.map,
          replace: X.replace,
          $$void: X.$$void,
          FunctorInfix: X.FunctorInfix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          apply: X.apply,
          liftA2: X.liftA2,
          applyFirst: X.applyFirst,
          applySecond: X.applySecond,
          ApplyInfix: X.ApplyInfix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          liftA3: X.liftA3,
          liftA4: X.liftA4,
          liftA5: X.liftA5,
          merge: X.merge,
          pure: X.pure,
          when_: X.when_,
          unless: X.unless
        };
}

function S2_to_S3(X) {
  return X;
}

function S3_to_S2(X) {
  return X;
}

function MakeCustom3(X) {
  var pure = X.pure;
  var pure$1 = X.pure;
  var apply = X.apply;
  var replace = X.replace;
  var match = X.map;
  var map;
  var exit = 0;
  if (typeof match === "number" || match[0] !== -198771759) {
    exit = 1;
  } else {
    map = match[1];
  }
  if (exit === 1) {
    map = (function (x, f) {
        return Curry._2(apply, x, Curry._1(pure$1, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map,
        replace: replace
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map,
        replace: replace,
        apply: apply,
        liftA2: X.liftA2,
        applySecond: X.applySecond,
        applyFirst: X.applyFirst
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          liftA2: $$let.liftA2,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function MakeCustom2(X) {
  var pure = X.pure;
  var apply = X.apply;
  var map = X.map;
  var replace = X.replace;
  var map$1;
  var exit = 0;
  if (typeof map === "number" || map[0] !== -198771759) {
    exit = 1;
  } else {
    map$1 = map[1];
  }
  if (exit === 1) {
    map$1 = (function (x, f) {
        return Curry._2(apply, x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map$1,
        replace: replace
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map$1,
        replace: replace,
        apply: apply,
        liftA2: X.liftA2,
        applySecond: X.applySecond,
        applyFirst: X.applyFirst
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          liftA2: $$let.liftA2,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function MakeCustom1(X) {
  var pure = X.pure;
  var apply = X.apply;
  var map = X.map;
  var replace = X.replace;
  var map$1;
  var exit = 0;
  if (typeof map === "number" || map[0] !== -198771759) {
    exit = 1;
  } else {
    map$1 = map[1];
  }
  if (exit === 1) {
    map$1 = (function (x, f) {
        return Curry._2(apply, x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map$1,
        replace: replace
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map$1,
        replace: replace,
        apply: apply,
        liftA2: X.liftA2,
        applySecond: X.applySecond,
        applyFirst: X.applyFirst
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          liftA2: $$let.liftA2,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function Make3(X) {
  var pure = X.pure;
  var apply = X.apply;
  var map;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    map = (function (x, f) {
        return Curry._2(apply, x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643,
        apply: apply,
        liftA2: /* Derived */-684824643,
        applySecond: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          liftA2: $$let.liftA2,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function Make2(X) {
  var pure = X.pure;
  var apply = X.apply;
  var map;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    map = (function (x, f) {
        return Curry._2(apply, x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643,
        apply: apply,
        liftA2: /* Derived */-684824643,
        applySecond: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          liftA2: $$let.liftA2,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function Make1(X) {
  var pure = X.pure;
  var apply = X.apply;
  var map;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    map = (function (x, f) {
        return Curry._2(apply, x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643,
        apply: apply,
        liftA2: /* Derived */-684824643,
        applySecond: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          liftA2: $$let.liftA2,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function Backwards3(X) {
  var pure = X.pure;
  var apply = function (x, f) {
    return Curry._2(X.apply, f, Curry._2(X.apply, x, Curry._1(X.pure, (function (x, f) {
                          return Curry._1(f, x);
                        }))));
  };
  var map;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    map = (function (x, f) {
        return apply(x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643,
        apply: apply,
        liftA2: /* Derived */-684824643,
        applySecond: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          liftA2: $$let.liftA2,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function Backwards2(X) {
  var pure = X.pure;
  var apply = X.apply;
  var apply$1 = function (x, f) {
    return Curry._2(apply, f, Curry._2(apply, x, Curry._1(pure, (function (x, f) {
                          return Curry._1(f, x);
                        }))));
  };
  var map;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    map = (function (x, f) {
        return apply$1(x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643,
        apply: apply$1,
        liftA2: /* Derived */-684824643,
        applySecond: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          liftA2: $$let.liftA2,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

function Backwards1(X) {
  var pure = X.pure;
  var apply = X.apply;
  var apply$1 = function (x, f) {
    return Curry._2(apply, f, Curry._2(apply, x, Curry._1(pure, (function (x, f) {
                          return Curry._1(f, x);
                        }))));
  };
  var map;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    map = (function (x, f) {
        return apply$1(x, Curry._1(pure, f));
      });
  }
  var include = Functor$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643
      });
  var $$let = Apply$CoreCategory.MakeCustom3({
        map: map,
        replace: /* Derived */-684824643,
        apply: apply$1,
        liftA2: /* Derived */-684824643,
        applySecond: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643
      });
  var when_ = function (t, cond) {
    if (cond) {
      return t;
    } else {
      return Curry._1(pure, /* () */0);
    }
  };
  var unless = function (t, cond) {
    if (cond) {
      return Curry._1(pure, /* () */0);
    } else {
      return t;
    }
  };
  return {
          map: $$let.map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: $$let.$less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: $$let.apply,
          liftA2: $$let.liftA2,
          applyFirst: $$let.applyFirst,
          applySecond: $$let.applySecond,
          ApplyInfix: $$let.ApplyInfix,
          $less$star$great: $$let.$less$star$great,
          $star$great: $$let.$star$great,
          $less$star: $$let.$less$star,
          $star$star: $$let.$star$star,
          liftA3: $$let.liftA3,
          liftA4: $$let.liftA4,
          liftA5: $$let.liftA5,
          merge: $$let.merge,
          pure: pure,
          when_: when_,
          unless: unless
        };
}

exports.S1_to_S2 = S1_to_S2;
exports.S2_to_S1 = S2_to_S1;
exports.S2_to_S3 = S2_to_S3;
exports.S3_to_S2 = S3_to_S2;
exports.MakeCustom1 = MakeCustom1;
exports.MakeCustom2 = MakeCustom2;
exports.MakeCustom3 = MakeCustom3;
exports.Make1 = Make1;
exports.Make2 = Make2;
exports.Make3 = Make3;
exports.Backwards1 = Backwards1;
exports.Backwards2 = Backwards2;
exports.Backwards3 = Backwards3;
/* No side effect */
