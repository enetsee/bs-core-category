// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Applicative$CoreCategory = require("./Applicative.bs.js");

function S_to_S2(X) {
  return {
          empty: X.empty,
          alt: X.alt,
          $$void: X.$$void,
          Functor_infix: X.Functor_infix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          $$return: X.$$return,
          apply: X.apply,
          discardFirst: X.discardFirst,
          discardSecond: X.discardSecond,
          liftA2: X.liftA2,
          liftA3: X.liftA3,
          map: X.map,
          unit: X.unit,
          merge: X.merge,
          Applicative_infix: X.Applicative_infix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          Alternative_infix: X.Alternative_infix,
          $less$pipe$great: X.$less$pipe$great,
          $less$slash$great: X.$less$slash$great,
          optional: X.optional
        };
}

function S2_to_S(X) {
  return {
          empty: X.empty,
          alt: X.alt,
          $$void: X.$$void,
          Functor_infix: X.Functor_infix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          $$return: X.$$return,
          apply: X.apply,
          liftA2: X.liftA2,
          liftA3: X.liftA3,
          discardFirst: X.discardFirst,
          discardSecond: X.discardSecond,
          map: X.map,
          unit: X.unit,
          merge: X.merge,
          Applicative_infix: X.Applicative_infix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          Alternative_infix: X.Alternative_infix,
          $less$pipe$great: X.$less$pipe$great,
          $less$slash$great: X.$less$slash$great,
          optional: X.optional
        };
}

function S2_to_S3(X) {
  return {
          empty: X.empty,
          alt: X.alt,
          $$void: X.$$void,
          Functor_infix: X.Functor_infix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          $$return: X.$$return,
          apply: X.apply,
          discardFirst: X.discardFirst,
          discardSecond: X.discardSecond,
          liftA2: X.liftA2,
          liftA3: X.liftA3,
          map: X.map,
          unit: X.unit,
          merge: X.merge,
          Applicative_infix: X.Applicative_infix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          Alternative_infix: X.Alternative_infix,
          $less$pipe$great: X.$less$pipe$great,
          $less$slash$great: X.$less$slash$great,
          optional: X.optional
        };
}

function S3_to_S2(X) {
  return {
          empty: X.empty,
          alt: X.alt,
          $$void: X.$$void,
          Functor_infix: X.Functor_infix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          $$return: X.$$return,
          apply: X.apply,
          discardFirst: X.discardFirst,
          discardSecond: X.discardSecond,
          liftA2: X.liftA2,
          liftA3: X.liftA3,
          map: X.map,
          unit: X.unit,
          merge: X.merge,
          Applicative_infix: X.Applicative_infix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          Alternative_infix: X.Alternative_infix,
          $less$pipe$great: X.$less$pipe$great,
          $less$slash$great: X.$less$slash$great,
          optional: X.optional
        };
}

function Make3(X) {
  var empty = X.empty;
  var alt = X.alt;
  var include = Applicative$CoreCategory.Make3({
        $$return: X.$$return,
        apply: X.apply,
        map: X.map,
        liftA2: X.liftA2,
        liftA3: X.liftA3,
        discardFirst: X.discardFirst,
        discardSecond: X.discardSecond
      });
  var $$return = include.$$return;
  var map = include.map;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1($$return, y));
  };
  var Alternative_infix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1($$return, undefined));
  };
  return {
          empty: empty,
          alt: alt,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: $$return,
          apply: include.apply,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          map: map,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Alternative_infix: Alternative_infix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          optional: optional
        };
}

function Make2(X) {
  var alt = X.alt;
  var include = Applicative$CoreCategory.Make3({
        $$return: X.$$return,
        apply: X.apply,
        map: X.map,
        liftA2: X.liftA2,
        liftA3: X.liftA3,
        discardFirst: X.discardFirst,
        discardSecond: X.discardSecond
      });
  var $$return = include.$$return;
  var map = include.map;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1($$return, y));
  };
  var Alternative_infix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1($$return, undefined));
  };
  return {
          empty: X.empty,
          alt: alt,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: $$return,
          apply: include.apply,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          map: map,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Alternative_infix: Alternative_infix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          optional: optional
        };
}

function Make(X) {
  var alt = X.alt;
  var include = Applicative$CoreCategory.Make3({
        $$return: X.$$return,
        apply: X.apply,
        map: X.map,
        liftA2: X.liftA2,
        liftA3: X.liftA3,
        discardFirst: X.discardFirst,
        discardSecond: X.discardSecond
      });
  var $$return = include.$$return;
  var map = include.map;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1($$return, y));
  };
  var Alternative_infix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1($$return, undefined));
  };
  return {
          empty: X.empty,
          alt: alt,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: $$return,
          apply: include.apply,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          map: map,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Alternative_infix: Alternative_infix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          optional: optional
        };
}

function Make_backwards3(X) {
  var $$return = X.$$return;
  var apply = function (x, f) {
    return Curry._2(X.apply, f, Curry._2(X.apply, x, Curry._1(X.$$return, (function (x, f) {
                          return Curry._1(f, x);
                        }))));
  };
  var liftA2 = X.liftA2;
  var liftA3 = X.liftA3;
  var discardFirst = X.discardFirst;
  var discardSecond = X.discardSecond;
  var map = X.map;
  var empty = X.empty;
  var alt = X.alt;
  var include = Applicative$CoreCategory.Make3({
        $$return: $$return,
        apply: apply,
        map: map,
        liftA2: liftA2,
        liftA3: liftA3,
        discardFirst: discardFirst,
        discardSecond: discardSecond
      });
  var $$return$1 = include.$$return;
  var map$1 = include.map;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1($$return$1, y));
  };
  var Alternative_infix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map$1, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1($$return$1, undefined));
  };
  return {
          empty: empty,
          alt: alt,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: $$return$1,
          apply: include.apply,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          map: map$1,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Alternative_infix: Alternative_infix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          optional: optional
        };
}

function Make_backwards2(X) {
  var $$return = X.$$return;
  var apply = X.apply;
  var alt = X.alt;
  var apply$1 = function (x, f) {
    return Curry._2(apply, f, Curry._2(apply, x, Curry._1($$return, (function (x, f) {
                          return Curry._1(f, x);
                        }))));
  };
  var include = Applicative$CoreCategory.Make3({
        $$return: $$return,
        apply: apply$1,
        map: X.map,
        liftA2: X.liftA2,
        liftA3: X.liftA3,
        discardFirst: X.discardFirst,
        discardSecond: X.discardSecond
      });
  var $$return$1 = include.$$return;
  var map = include.map;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1($$return$1, y));
  };
  var Alternative_infix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1($$return$1, undefined));
  };
  return {
          empty: X.empty,
          alt: alt,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: $$return$1,
          apply: include.apply,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          map: map,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Alternative_infix: Alternative_infix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          optional: optional
        };
}

function Make_backwards(X) {
  var $$return = X.$$return;
  var apply = X.apply;
  var alt = X.alt;
  var apply$1 = function (x, f) {
    return Curry._2(apply, f, Curry._2(apply, x, Curry._1($$return, (function (x, f) {
                          return Curry._1(f, x);
                        }))));
  };
  var include = Applicative$CoreCategory.Make3({
        $$return: $$return,
        apply: apply$1,
        map: X.map,
        liftA2: X.liftA2,
        liftA3: X.liftA3,
        discardFirst: X.discardFirst,
        discardSecond: X.discardSecond
      });
  var $$return$1 = include.$$return;
  var map = include.map;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1($$return$1, y));
  };
  var Alternative_infix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1($$return$1, undefined));
  };
  return {
          empty: X.empty,
          alt: alt,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: $$return$1,
          apply: include.apply,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          map: map,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Alternative_infix: Alternative_infix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          optional: optional
        };
}

exports.S_to_S2 = S_to_S2;
exports.S2_to_S = S2_to_S;
exports.S2_to_S3 = S2_to_S3;
exports.S3_to_S2 = S3_to_S2;
exports.Make = Make;
exports.Make2 = Make2;
exports.Make3 = Make3;
exports.Make_backwards = Make_backwards;
exports.Make_backwards2 = Make_backwards2;
exports.Make_backwards3 = Make_backwards3;
/* Applicative-CoreCategory Not a pure module */
