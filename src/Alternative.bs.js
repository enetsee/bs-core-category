// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Plus$CoreCategory = require("./Plus.bs.js");
var Applicative$CoreCategory = require("./Applicative.bs.js");

function S1_to_S2(X) {
  return {
          FunctorInfix: X.FunctorInfix,
          alt: X.alt,
          AltInfix: X.AltInfix,
          empty: X.empty,
          map: X.map,
          replace: X.replace,
          $$void: X.$$void,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          apply: X.apply,
          applyFirst: X.applyFirst,
          applySecond: X.applySecond,
          liftA2: X.liftA2,
          ApplyInfix: X.ApplyInfix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          liftA3: X.liftA3,
          liftA4: X.liftA4,
          liftA5: X.liftA5,
          merge: X.merge,
          pure: X.pure,
          when_: X.when_,
          unless: X.unless,
          AlternativeInfix: X.AlternativeInfix,
          $less$pipe$great: X.$less$pipe$great,
          $less$slash$great: X.$less$slash$great,
          some: X.some,
          many: X.many,
          optional: X.optional
        };
}

function S2_to_S1(X) {
  return {
          FunctorInfix: X.FunctorInfix,
          alt: X.alt,
          AltInfix: X.AltInfix,
          empty: X.empty,
          map: X.map,
          replace: X.replace,
          $$void: X.$$void,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          apply: X.apply,
          liftA2: X.liftA2,
          applyFirst: X.applyFirst,
          applySecond: X.applySecond,
          ApplyInfix: X.ApplyInfix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          liftA3: X.liftA3,
          liftA4: X.liftA4,
          liftA5: X.liftA5,
          merge: X.merge,
          pure: X.pure,
          when_: X.when_,
          unless: X.unless,
          AlternativeInfix: X.AlternativeInfix,
          $less$pipe$great: X.$less$pipe$great,
          $less$slash$great: X.$less$slash$great,
          some: X.some,
          many: X.many,
          optional: X.optional
        };
}

function S2_to_S3(X) {
  return X;
}

function S3_to_S2(X) {
  return X;
}

function MakeCustom3(X) {
  var include = Applicative$CoreCategory.MakeCustom3({
        pure: X.pure,
        apply: X.apply,
        map: X.map,
        replace: X.replace,
        liftA2: X.liftA2,
        applyFirst: X.applyFirst,
        applySecond: X.applySecond
      });
  var $less$star$great = include.$less$star$great;
  var pure = include.pure;
  var replace_001 = include.replace;
  var replace = /* `Custom */[
    -198771759,
    replace_001
  ];
  var $$let = Plus$CoreCategory.MakeCustom3({
        map: include.map,
        replace: replace,
        alt: X.alt,
        empty: X.empty
      });
  var map = $$let.map;
  var $less$$great = $$let.$less$$great;
  var alt = $$let.alt;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1(pure, y));
  };
  var AlternativeInfix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var some = function (v) {
    return Curry._2($less$star$great, Curry._2($less$$great, (function (x, xs) {
                      return /* :: */[
                              x,
                              xs
                            ];
                    }), v), many(v));
  };
  var many = function (v) {
    return Curry._2(alt, some(v), Curry._1(pure, /* [] */0));
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1(pure, undefined));
  };
  return {
          FunctorInfix: include.FunctorInfix,
          alt: alt,
          AltInfix: $$let.AltInfix,
          empty: $$let.empty,
          map: map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          $less$$great: $less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: include.apply,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          liftA2: include.liftA2,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: pure,
          when_: include.when_,
          unless: include.unless,
          AlternativeInfix: AlternativeInfix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          some: some,
          many: many,
          optional: optional
        };
}

function MakeCustom2(X) {
  var include = Applicative$CoreCategory.MakeCustom3({
        pure: X.pure,
        apply: X.apply,
        map: X.map,
        replace: X.replace,
        liftA2: X.liftA2,
        applyFirst: X.applyFirst,
        applySecond: X.applySecond
      });
  var $less$star$great = include.$less$star$great;
  var pure = include.pure;
  var replace_001 = include.replace;
  var replace = /* `Custom */[
    -198771759,
    replace_001
  ];
  var $$let = Plus$CoreCategory.MakeCustom3({
        map: include.map,
        replace: replace,
        alt: X.alt,
        empty: X.empty
      });
  var map = $$let.map;
  var $less$$great = $$let.$less$$great;
  var alt = $$let.alt;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1(pure, y));
  };
  var AlternativeInfix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var some = function (v) {
    return Curry._2($less$star$great, Curry._2($less$$great, (function (x, xs) {
                      return /* :: */[
                              x,
                              xs
                            ];
                    }), v), many(v));
  };
  var many = function (v) {
    return Curry._2(alt, some(v), Curry._1(pure, /* [] */0));
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1(pure, undefined));
  };
  return {
          FunctorInfix: include.FunctorInfix,
          alt: alt,
          AltInfix: $$let.AltInfix,
          empty: $$let.empty,
          map: map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          $less$$great: $less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: include.apply,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          liftA2: include.liftA2,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: pure,
          when_: include.when_,
          unless: include.unless,
          AlternativeInfix: AlternativeInfix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          some: some,
          many: many,
          optional: optional
        };
}

function MakeCustom1(X) {
  var include = Applicative$CoreCategory.MakeCustom3({
        pure: X.pure,
        apply: X.apply,
        map: X.map,
        replace: X.replace,
        liftA2: X.liftA2,
        applyFirst: X.applyFirst,
        applySecond: X.applySecond
      });
  var $less$star$great = include.$less$star$great;
  var pure = include.pure;
  var replace_001 = include.replace;
  var replace = /* `Custom */[
    -198771759,
    replace_001
  ];
  var $$let = Plus$CoreCategory.MakeCustom3({
        map: include.map,
        replace: replace,
        alt: X.alt,
        empty: X.empty
      });
  var map = $$let.map;
  var $less$$great = $$let.$less$$great;
  var alt = $$let.alt;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1(pure, y));
  };
  var AlternativeInfix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var some = function (v) {
    return Curry._2($less$star$great, Curry._2($less$$great, (function (x, xs) {
                      return /* :: */[
                              x,
                              xs
                            ];
                    }), v), many(v));
  };
  var many = function (v) {
    return Curry._2(alt, some(v), Curry._1(pure, /* [] */0));
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1(pure, undefined));
  };
  return {
          FunctorInfix: include.FunctorInfix,
          alt: alt,
          AltInfix: $$let.AltInfix,
          empty: $$let.empty,
          map: map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          $less$$great: $less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: include.apply,
          liftA2: include.liftA2,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: pure,
          when_: include.when_,
          unless: include.unless,
          AlternativeInfix: AlternativeInfix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          some: some,
          many: many,
          optional: optional
        };
}

function Make3(X) {
  var include = Applicative$CoreCategory.MakeCustom3({
        pure: X.pure,
        apply: X.apply,
        map: /* Derived */-684824643,
        replace: /* Derived */-684824643,
        liftA2: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643,
        applySecond: /* Derived */-684824643
      });
  var $less$star$great = include.$less$star$great;
  var pure = include.pure;
  var replace_001 = include.replace;
  var replace = /* `Custom */[
    -198771759,
    replace_001
  ];
  var $$let = Plus$CoreCategory.MakeCustom3({
        map: include.map,
        replace: replace,
        alt: X.alt,
        empty: X.empty
      });
  var map = $$let.map;
  var $less$$great = $$let.$less$$great;
  var alt = $$let.alt;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1(pure, y));
  };
  var AlternativeInfix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var some = function (v) {
    return Curry._2($less$star$great, Curry._2($less$$great, (function (x, xs) {
                      return /* :: */[
                              x,
                              xs
                            ];
                    }), v), many(v));
  };
  var many = function (v) {
    return Curry._2(alt, some(v), Curry._1(pure, /* [] */0));
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1(pure, undefined));
  };
  return {
          FunctorInfix: include.FunctorInfix,
          alt: alt,
          AltInfix: $$let.AltInfix,
          empty: $$let.empty,
          map: map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          $less$$great: $less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: include.apply,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          liftA2: include.liftA2,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: pure,
          when_: include.when_,
          unless: include.unless,
          AlternativeInfix: AlternativeInfix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          some: some,
          many: many,
          optional: optional
        };
}

function Make2(X) {
  var include = Applicative$CoreCategory.MakeCustom3({
        pure: X.pure,
        apply: X.apply,
        map: /* Derived */-684824643,
        replace: /* Derived */-684824643,
        liftA2: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643,
        applySecond: /* Derived */-684824643
      });
  var $less$star$great = include.$less$star$great;
  var pure = include.pure;
  var replace_001 = include.replace;
  var replace = /* `Custom */[
    -198771759,
    replace_001
  ];
  var $$let = Plus$CoreCategory.MakeCustom3({
        map: include.map,
        replace: replace,
        alt: X.alt,
        empty: X.empty
      });
  var map = $$let.map;
  var $less$$great = $$let.$less$$great;
  var alt = $$let.alt;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1(pure, y));
  };
  var AlternativeInfix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var some = function (v) {
    return Curry._2($less$star$great, Curry._2($less$$great, (function (x, xs) {
                      return /* :: */[
                              x,
                              xs
                            ];
                    }), v), many(v));
  };
  var many = function (v) {
    return Curry._2(alt, some(v), Curry._1(pure, /* [] */0));
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1(pure, undefined));
  };
  return {
          FunctorInfix: include.FunctorInfix,
          alt: alt,
          AltInfix: $$let.AltInfix,
          empty: $$let.empty,
          map: map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          $less$$great: $less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: include.apply,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          liftA2: include.liftA2,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: pure,
          when_: include.when_,
          unless: include.unless,
          AlternativeInfix: AlternativeInfix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          some: some,
          many: many,
          optional: optional
        };
}

function Make1(X) {
  var include = Applicative$CoreCategory.MakeCustom3({
        pure: X.pure,
        apply: X.apply,
        map: /* Derived */-684824643,
        replace: /* Derived */-684824643,
        liftA2: /* Derived */-684824643,
        applyFirst: /* Derived */-684824643,
        applySecond: /* Derived */-684824643
      });
  var $less$star$great = include.$less$star$great;
  var pure = include.pure;
  var replace_001 = include.replace;
  var replace = /* `Custom */[
    -198771759,
    replace_001
  ];
  var $$let = Plus$CoreCategory.MakeCustom3({
        map: include.map,
        replace: replace,
        alt: X.alt,
        empty: X.empty
      });
  var map = $$let.map;
  var $less$$great = $$let.$less$$great;
  var alt = $$let.alt;
  var $less$pipe$great = Curry.__2(alt);
  var $less$slash$great = function (x, y) {
    return Curry._2(alt, x, Curry._1(pure, y));
  };
  var AlternativeInfix = {
    $less$pipe$great: $less$pipe$great,
    $less$slash$great: $less$slash$great
  };
  var some = function (v) {
    return Curry._2($less$star$great, Curry._2($less$$great, (function (x, xs) {
                      return /* :: */[
                              x,
                              xs
                            ];
                    }), v), many(v));
  };
  var many = function (v) {
    return Curry._2(alt, some(v), Curry._1(pure, /* [] */0));
  };
  var optional = function (x) {
    return Curry._2(alt, Curry._2(map, x, (function (x) {
                      return Caml_option.some(x);
                    })), Curry._1(pure, undefined));
  };
  return {
          FunctorInfix: include.FunctorInfix,
          alt: alt,
          AltInfix: $$let.AltInfix,
          empty: $$let.empty,
          map: map,
          replace: $$let.replace,
          $$void: $$let.$$void,
          $less$$great: $less$$great,
          $less$amp$great: $$let.$less$amp$great,
          $less$: $$let.$less$,
          $$great: $$let.$$great,
          apply: include.apply,
          liftA2: include.liftA2,
          applyFirst: include.applyFirst,
          applySecond: include.applySecond,
          ApplyInfix: include.ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          liftA3: include.liftA3,
          liftA4: include.liftA4,
          liftA5: include.liftA5,
          merge: include.merge,
          pure: pure,
          when_: include.when_,
          unless: include.unless,
          AlternativeInfix: AlternativeInfix,
          $less$pipe$great: $less$pipe$great,
          $less$slash$great: $less$slash$great,
          some: some,
          many: many,
          optional: optional
        };
}

exports.S1_to_S2 = S1_to_S2;
exports.S2_to_S1 = S2_to_S1;
exports.S2_to_S3 = S2_to_S3;
exports.S3_to_S2 = S3_to_S2;
exports.MakeCustom1 = MakeCustom1;
exports.MakeCustom2 = MakeCustom2;
exports.MakeCustom3 = MakeCustom3;
exports.Make1 = Make1;
exports.Make2 = Make2;
exports.Make3 = Make3;
/* No side effect */
