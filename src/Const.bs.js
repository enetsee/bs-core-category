// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Selective$CoreCategory = require("./Selective.bs.js");
var Applicative$CoreCategory = require("./Applicative.bs.js");

function Make(M) {
  var getConst = function (x) {
    return x;
  };
  var $$const = function (x) {
    return x;
  };
  var map_001 = function (x, param) {
    return x;
  };
  var map = /* `Custom */[
    -198771759,
    map_001
  ];
  var $$return = function (param) {
    return M.empty;
  };
  var apply = function (x, f) {
    return Curry._2(M.combine, f, x);
  };
  var include = Applicative$CoreCategory.Make({
        $$return: $$return,
        apply: apply,
        map: map,
        liftA2: /* Using_apply */524559571,
        liftA3: /* Using_apply */524559571,
        discardFirst: /* Using_apply */524559571,
        discardSecond: /* Using_apply */524559571
      });
  var select = function (x, f) {
    return Curry._2(M.combine, x, f);
  };
  var include$1 = Selective$CoreCategory.Make({
        $$return: $$return,
        apply: apply,
        map: map,
        liftA2: /* Using_apply */524559571,
        liftA3: /* Using_apply */524559571,
        discardFirst: /* Using_apply */524559571,
        discardSecond: /* Using_apply */524559571,
        select: select
      });
  var select$1 = function (x, param) {
    return x;
  };
  var include$2 = Selective$CoreCategory.Make({
        $$return: $$return,
        apply: apply,
        map: map,
        liftA2: /* Using_apply */524559571,
        liftA3: /* Using_apply */524559571,
        discardFirst: /* Using_apply */524559571,
        discardSecond: /* Using_apply */524559571,
        select: select$1
      });
  return {
          getConst: getConst,
          $$const: $$const,
          $$void: include.$$void,
          Functor_infix: include.Functor_infix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: include.$less$,
          $$great: include.$$great,
          $$return: include.$$return,
          apply: include.apply,
          liftA2: include.liftA2,
          liftA3: include.liftA3,
          discardFirst: include.discardFirst,
          discardSecond: include.discardSecond,
          map: include.map,
          unit: include.unit,
          merge: include.merge,
          Applicative_infix: include.Applicative_infix,
          $less$star$great: include.$less$star$great,
          $star$great: include.$star$great,
          $less$star: include.$less$star,
          $star$star: include.$star$star,
          Over: {
            select: include$1.select,
            $$void: include$1.$$void,
            Functor_infix: include$1.Functor_infix,
            $less$$great: include$1.$less$$great,
            $less$amp$great: include$1.$less$amp$great,
            $less$: include$1.$less$,
            $$great: include$1.$$great,
            $$return: include$1.$$return,
            apply: include$1.apply,
            liftA2: include$1.liftA2,
            liftA3: include$1.liftA3,
            discardFirst: include$1.discardFirst,
            discardSecond: include$1.discardSecond,
            map: include$1.map,
            unit: include$1.unit,
            merge: include$1.merge,
            Applicative_infix: include$1.Applicative_infix,
            $less$star$great: include$1.$less$star$great,
            $star$great: include$1.$star$great,
            $less$star: include$1.$less$star,
            $star$star: include$1.$star$star,
            Selective_infix: include$1.Selective_infix,
            $less$star$question: include$1.$less$star$question,
            $less$pipe$pipe$great: include$1.$less$pipe$pipe$great,
            $less$amp$amp$great: include$1.$less$amp$amp$great,
            orS: include$1.orS,
            andS: include$1.andS,
            whenS: include$1.whenS,
            branch: include$1.branch,
            ifS: include$1.ifS,
            fromOptionS: include$1.fromOptionS,
            anyS: include$1.anyS,
            allS: include$1.allS,
            whileS: include$1.whileS,
            getConst: getConst,
            $$const: $$const
          },
          Under: {
            select: include$2.select,
            $$void: include$2.$$void,
            Functor_infix: include$2.Functor_infix,
            $less$$great: include$2.$less$$great,
            $less$amp$great: include$2.$less$amp$great,
            $less$: include$2.$less$,
            $$great: include$2.$$great,
            $$return: include$2.$$return,
            apply: include$2.apply,
            liftA2: include$2.liftA2,
            liftA3: include$2.liftA3,
            discardFirst: include$2.discardFirst,
            discardSecond: include$2.discardSecond,
            map: include$2.map,
            unit: include$2.unit,
            merge: include$2.merge,
            Applicative_infix: include$2.Applicative_infix,
            $less$star$great: include$2.$less$star$great,
            $star$great: include$2.$star$great,
            $less$star: include$2.$less$star,
            $star$star: include$2.$star$star,
            Selective_infix: include$2.Selective_infix,
            $less$star$question: include$2.$less$star$question,
            $less$pipe$pipe$great: include$2.$less$pipe$pipe$great,
            $less$amp$amp$great: include$2.$less$amp$amp$great,
            orS: include$2.orS,
            andS: include$2.andS,
            whenS: include$2.whenS,
            branch: include$2.branch,
            ifS: include$2.ifS,
            fromOptionS: include$2.fromOptionS,
            anyS: include$2.anyS,
            allS: include$2.allS,
            whileS: include$2.whileS,
            getConst: getConst,
            $$const: $$const
          }
        };
}

exports.Make = Make;
/* Selective-CoreCategory Not a pure module */
