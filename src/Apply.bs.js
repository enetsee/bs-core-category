// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Functor$CoreCategory = require("./Functor.bs.js");

function S1_to_S2(X) {
  return {
          map: X.map,
          replace: X.replace,
          $$void: X.$$void,
          FunctorInfix: X.FunctorInfix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          apply: X.apply,
          applyFirst: X.applyFirst,
          applySecond: X.applySecond,
          liftA2: X.liftA2,
          ApplyInfix: X.ApplyInfix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          liftA3: X.liftA3,
          liftA4: X.liftA4,
          liftA5: X.liftA5,
          merge: X.merge
        };
}

function S2_to_S1(X) {
  return {
          map: X.map,
          replace: X.replace,
          $$void: X.$$void,
          FunctorInfix: X.FunctorInfix,
          $less$$great: X.$less$$great,
          $less$amp$great: X.$less$amp$great,
          $less$: X.$less$,
          $$great: X.$$great,
          apply: X.apply,
          liftA2: X.liftA2,
          applyFirst: X.applyFirst,
          applySecond: X.applySecond,
          ApplyInfix: X.ApplyInfix,
          $less$star$great: X.$less$star$great,
          $star$great: X.$star$great,
          $less$star: X.$less$star,
          $star$star: X.$star$star,
          liftA3: X.liftA3,
          liftA4: X.liftA4,
          liftA5: X.liftA5,
          merge: X.merge
        };
}

function S2_to_S3(X) {
  return X;
}

function S3_to_S2(X) {
  return X;
}

function MakeCustom3(X) {
  var apply = X.apply;
  var include = Functor$CoreCategory.MakeCustom3(X);
  var map = include.map;
  var $less$ = include.$less$;
  var match = X.liftA2;
  var liftA2;
  var exit = 0;
  if (typeof match === "number" || match[0] !== -198771759) {
    exit = 1;
  } else {
    liftA2 = match[1];
  }
  if (exit === 1) {
    liftA2 = (function (x, y, f) {
        return Curry._2(apply, y, Curry._2(map, x, f));
      });
  }
  var match$1 = X.applySecond;
  var applySecond;
  var exit$1 = 0;
  if (typeof match$1 === "number" || match$1[0] !== -198771759) {
    exit$1 = 1;
  } else {
    applySecond = match$1[1];
  }
  if (exit$1 === 1) {
    applySecond = (function (x, y) {
        return Curry._2(apply, y, Curry._2($less$, (function (x) {
                          return x;
                        }), x));
      });
  }
  var match$2 = X.applyFirst;
  var applyFirst;
  var exit$2 = 0;
  if (typeof match$2 === "number" || match$2[0] !== -198771759) {
    exit$2 = 1;
  } else {
    applyFirst = match$2[1];
  }
  if (exit$2 === 1) {
    var arg = function (x, param) {
      return x;
    };
    applyFirst = (function (param) {
        var func = Curry._1(liftA2, param);
        return (function (param) {
            return Curry._2(func, param, arg);
          });
      });
  }
  var merge = function (mx, my) {
    return Curry._3(liftA2, mx, my, (function (x, y) {
                  return /* tuple */[
                          x,
                          y
                        ];
                }));
  };
  var liftA3 = function (x, y, z, f) {
    return Curry._2(apply, z, Curry._3(liftA2, x, y, f));
  };
  var liftA4 = function (x, y, z, u, f) {
    return Curry._2(apply, u, liftA3(x, y, z, f));
  };
  var liftA5 = function (x, y, z, u, v, f) {
    return Curry._2(apply, v, liftA4(x, y, z, u, f));
  };
  var $less$star$great = function (f, x) {
    return Curry._2(apply, x, f);
  };
  var $star$great = Curry.__2(applySecond);
  var $less$star = Curry.__2(applyFirst);
  var $star$star = merge;
  var ApplyInfix = {
    $less$star$great: $less$star$great,
    $star$great: $star$great,
    $less$star: $less$star,
    $star$star: $star$star
  };
  return {
          map: map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: $less$,
          $$great: include.$$great,
          apply: apply,
          applyFirst: applyFirst,
          applySecond: applySecond,
          liftA2: liftA2,
          ApplyInfix: ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: $star$great,
          $less$star: $less$star,
          $star$star: $star$star,
          liftA3: liftA3,
          liftA4: liftA4,
          liftA5: liftA5,
          merge: merge
        };
}

function MakeCustom2(X) {
  var apply = X.apply;
  var liftA2 = X.liftA2;
  var applySecond = X.applySecond;
  var applyFirst = X.applyFirst;
  var X_map = X.map;
  var X_replace = X.replace;
  var X$1 = {
    map: X_map,
    replace: X_replace,
    apply: apply,
    liftA2: liftA2,
    applySecond: applySecond,
    applyFirst: applyFirst
  };
  var include = Functor$CoreCategory.MakeCustom3(X$1);
  var map = include.map;
  var $less$ = include.$less$;
  var liftA2$1;
  var exit = 0;
  if (typeof liftA2 === "number" || liftA2[0] !== -198771759) {
    exit = 1;
  } else {
    liftA2$1 = liftA2[1];
  }
  if (exit === 1) {
    liftA2$1 = (function (x, y, f) {
        return Curry._2(apply, y, Curry._2(map, x, f));
      });
  }
  var applySecond$1;
  var exit$1 = 0;
  if (typeof applySecond === "number" || applySecond[0] !== -198771759) {
    exit$1 = 1;
  } else {
    applySecond$1 = applySecond[1];
  }
  if (exit$1 === 1) {
    applySecond$1 = (function (x, y) {
        return Curry._2(apply, y, Curry._2($less$, (function (x) {
                          return x;
                        }), x));
      });
  }
  var applyFirst$1;
  var exit$2 = 0;
  if (typeof applyFirst === "number" || applyFirst[0] !== -198771759) {
    exit$2 = 1;
  } else {
    applyFirst$1 = applyFirst[1];
  }
  if (exit$2 === 1) {
    var arg = function (x, param) {
      return x;
    };
    applyFirst$1 = (function (param) {
        var func = Curry._1(liftA2$1, param);
        return (function (param) {
            return Curry._2(func, param, arg);
          });
      });
  }
  var merge = function (mx, my) {
    return Curry._3(liftA2$1, mx, my, (function (x, y) {
                  return /* tuple */[
                          x,
                          y
                        ];
                }));
  };
  var liftA3 = function (x, y, z, f) {
    return Curry._2(apply, z, Curry._3(liftA2$1, x, y, f));
  };
  var liftA4 = function (x, y, z, u, f) {
    return Curry._2(apply, u, liftA3(x, y, z, f));
  };
  var liftA5 = function (x, y, z, u, v, f) {
    return Curry._2(apply, v, liftA4(x, y, z, u, f));
  };
  var $less$star$great = function (f, x) {
    return Curry._2(apply, x, f);
  };
  var $star$great = Curry.__2(applySecond$1);
  var $less$star = Curry.__2(applyFirst$1);
  var $star$star = merge;
  var ApplyInfix = {
    $less$star$great: $less$star$great,
    $star$great: $star$great,
    $less$star: $less$star,
    $star$star: $star$star
  };
  return {
          map: map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: $less$,
          $$great: include.$$great,
          apply: apply,
          applyFirst: applyFirst$1,
          applySecond: applySecond$1,
          liftA2: liftA2$1,
          ApplyInfix: ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: $star$great,
          $less$star: $less$star,
          $star$star: $star$star,
          liftA3: liftA3,
          liftA4: liftA4,
          liftA5: liftA5,
          merge: merge
        };
}

function MakeCustom1(X) {
  var apply = X.apply;
  var liftA2 = X.liftA2;
  var applySecond = X.applySecond;
  var applyFirst = X.applyFirst;
  var X_map = X.map;
  var X_replace = X.replace;
  var X$1 = {
    map: X_map,
    replace: X_replace,
    apply: apply,
    liftA2: liftA2,
    applySecond: applySecond,
    applyFirst: applyFirst
  };
  var include = Functor$CoreCategory.MakeCustom3(X$1);
  var map = include.map;
  var $less$ = include.$less$;
  var liftA2$1;
  var exit = 0;
  if (typeof liftA2 === "number" || liftA2[0] !== -198771759) {
    exit = 1;
  } else {
    liftA2$1 = liftA2[1];
  }
  if (exit === 1) {
    liftA2$1 = (function (x, y, f) {
        return Curry._2(apply, y, Curry._2(map, x, f));
      });
  }
  var applySecond$1;
  var exit$1 = 0;
  if (typeof applySecond === "number" || applySecond[0] !== -198771759) {
    exit$1 = 1;
  } else {
    applySecond$1 = applySecond[1];
  }
  if (exit$1 === 1) {
    applySecond$1 = (function (x, y) {
        return Curry._2(apply, y, Curry._2($less$, (function (x) {
                          return x;
                        }), x));
      });
  }
  var applyFirst$1;
  var exit$2 = 0;
  if (typeof applyFirst === "number" || applyFirst[0] !== -198771759) {
    exit$2 = 1;
  } else {
    applyFirst$1 = applyFirst[1];
  }
  if (exit$2 === 1) {
    var arg = function (x, param) {
      return x;
    };
    applyFirst$1 = (function (param) {
        var func = Curry._1(liftA2$1, param);
        return (function (param) {
            return Curry._2(func, param, arg);
          });
      });
  }
  var merge = function (mx, my) {
    return Curry._3(liftA2$1, mx, my, (function (x, y) {
                  return /* tuple */[
                          x,
                          y
                        ];
                }));
  };
  var liftA3 = function (x, y, z, f) {
    return Curry._2(apply, z, Curry._3(liftA2$1, x, y, f));
  };
  var liftA4 = function (x, y, z, u, f) {
    return Curry._2(apply, u, liftA3(x, y, z, f));
  };
  var liftA5 = function (x, y, z, u, v, f) {
    return Curry._2(apply, v, liftA4(x, y, z, u, f));
  };
  var $less$star$great = function (f, x) {
    return Curry._2(apply, x, f);
  };
  var $star$great = Curry.__2(applySecond$1);
  var $less$star = Curry.__2(applyFirst$1);
  var $star$star = merge;
  var ApplyInfix = {
    $less$star$great: $less$star$great,
    $star$great: $star$great,
    $less$star: $less$star,
    $star$star: $star$star
  };
  return {
          map: map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: $less$,
          $$great: include.$$great,
          apply: apply,
          liftA2: liftA2$1,
          applyFirst: applyFirst$1,
          applySecond: applySecond$1,
          ApplyInfix: ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: $star$great,
          $less$star: $less$star,
          $star$star: $star$star,
          liftA3: liftA3,
          liftA4: liftA4,
          liftA5: liftA5,
          merge: merge
        };
}

function Make3(X) {
  var apply = X.apply;
  var X_map = X.map;
  var X$1 = {
    map: X_map,
    replace: /* Derived */-684824643,
    apply: apply,
    liftA2: /* Derived */-684824643,
    applySecond: /* Derived */-684824643,
    applyFirst: /* Derived */-684824643
  };
  var include = Functor$CoreCategory.MakeCustom3(X$1);
  var map = include.map;
  var $less$ = include.$less$;
  var liftA2;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    liftA2 = (function (x, y, f) {
        return Curry._2(apply, y, Curry._2(map, x, f));
      });
  }
  var applySecond;
  var exit$1 = 0;
  exit$1 = 1;
  if (exit$1 === 1) {
    applySecond = (function (x, y) {
        return Curry._2(apply, y, Curry._2($less$, (function (x) {
                          return x;
                        }), x));
      });
  }
  var applyFirst;
  var exit$2 = 0;
  exit$2 = 1;
  if (exit$2 === 1) {
    var arg = function (x, param) {
      return x;
    };
    applyFirst = (function (param) {
        var func = Curry._1(liftA2, param);
        return (function (param) {
            return Curry._2(func, param, arg);
          });
      });
  }
  var merge = function (mx, my) {
    return Curry._3(liftA2, mx, my, (function (x, y) {
                  return /* tuple */[
                          x,
                          y
                        ];
                }));
  };
  var liftA3 = function (x, y, z, f) {
    return Curry._2(apply, z, Curry._3(liftA2, x, y, f));
  };
  var liftA4 = function (x, y, z, u, f) {
    return Curry._2(apply, u, liftA3(x, y, z, f));
  };
  var liftA5 = function (x, y, z, u, v, f) {
    return Curry._2(apply, v, liftA4(x, y, z, u, f));
  };
  var $less$star$great = function (f, x) {
    return Curry._2(apply, x, f);
  };
  var $star$great = Curry.__2(applySecond);
  var $less$star = Curry.__2(applyFirst);
  var $star$star = merge;
  var ApplyInfix = {
    $less$star$great: $less$star$great,
    $star$great: $star$great,
    $less$star: $less$star,
    $star$star: $star$star
  };
  return {
          map: map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: $less$,
          $$great: include.$$great,
          apply: apply,
          applyFirst: applyFirst,
          applySecond: applySecond,
          liftA2: liftA2,
          ApplyInfix: ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: $star$great,
          $less$star: $less$star,
          $star$star: $star$star,
          liftA3: liftA3,
          liftA4: liftA4,
          liftA5: liftA5,
          merge: merge
        };
}

function Make2(X) {
  var apply = X.apply;
  var X_map = X.map;
  var X$1 = {
    map: X_map,
    replace: /* Derived */-684824643,
    apply: apply,
    liftA2: /* Derived */-684824643,
    applySecond: /* Derived */-684824643,
    applyFirst: /* Derived */-684824643
  };
  var include = Functor$CoreCategory.MakeCustom3(X$1);
  var map = include.map;
  var $less$ = include.$less$;
  var liftA2;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    liftA2 = (function (x, y, f) {
        return Curry._2(apply, y, Curry._2(map, x, f));
      });
  }
  var applySecond;
  var exit$1 = 0;
  exit$1 = 1;
  if (exit$1 === 1) {
    applySecond = (function (x, y) {
        return Curry._2(apply, y, Curry._2($less$, (function (x) {
                          return x;
                        }), x));
      });
  }
  var applyFirst;
  var exit$2 = 0;
  exit$2 = 1;
  if (exit$2 === 1) {
    var arg = function (x, param) {
      return x;
    };
    applyFirst = (function (param) {
        var func = Curry._1(liftA2, param);
        return (function (param) {
            return Curry._2(func, param, arg);
          });
      });
  }
  var merge = function (mx, my) {
    return Curry._3(liftA2, mx, my, (function (x, y) {
                  return /* tuple */[
                          x,
                          y
                        ];
                }));
  };
  var liftA3 = function (x, y, z, f) {
    return Curry._2(apply, z, Curry._3(liftA2, x, y, f));
  };
  var liftA4 = function (x, y, z, u, f) {
    return Curry._2(apply, u, liftA3(x, y, z, f));
  };
  var liftA5 = function (x, y, z, u, v, f) {
    return Curry._2(apply, v, liftA4(x, y, z, u, f));
  };
  var $less$star$great = function (f, x) {
    return Curry._2(apply, x, f);
  };
  var $star$great = Curry.__2(applySecond);
  var $less$star = Curry.__2(applyFirst);
  var $star$star = merge;
  var ApplyInfix = {
    $less$star$great: $less$star$great,
    $star$great: $star$great,
    $less$star: $less$star,
    $star$star: $star$star
  };
  return {
          map: map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: $less$,
          $$great: include.$$great,
          apply: apply,
          applyFirst: applyFirst,
          applySecond: applySecond,
          liftA2: liftA2,
          ApplyInfix: ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: $star$great,
          $less$star: $less$star,
          $star$star: $star$star,
          liftA3: liftA3,
          liftA4: liftA4,
          liftA5: liftA5,
          merge: merge
        };
}

function Make1(X) {
  var apply = X.apply;
  var X_map = X.map;
  var X$1 = {
    map: X_map,
    replace: /* Derived */-684824643,
    apply: apply,
    liftA2: /* Derived */-684824643,
    applySecond: /* Derived */-684824643,
    applyFirst: /* Derived */-684824643
  };
  var include = Functor$CoreCategory.MakeCustom3(X$1);
  var map = include.map;
  var $less$ = include.$less$;
  var liftA2;
  var exit = 0;
  exit = 1;
  if (exit === 1) {
    liftA2 = (function (x, y, f) {
        return Curry._2(apply, y, Curry._2(map, x, f));
      });
  }
  var applySecond;
  var exit$1 = 0;
  exit$1 = 1;
  if (exit$1 === 1) {
    applySecond = (function (x, y) {
        return Curry._2(apply, y, Curry._2($less$, (function (x) {
                          return x;
                        }), x));
      });
  }
  var applyFirst;
  var exit$2 = 0;
  exit$2 = 1;
  if (exit$2 === 1) {
    var arg = function (x, param) {
      return x;
    };
    applyFirst = (function (param) {
        var func = Curry._1(liftA2, param);
        return (function (param) {
            return Curry._2(func, param, arg);
          });
      });
  }
  var merge = function (mx, my) {
    return Curry._3(liftA2, mx, my, (function (x, y) {
                  return /* tuple */[
                          x,
                          y
                        ];
                }));
  };
  var liftA3 = function (x, y, z, f) {
    return Curry._2(apply, z, Curry._3(liftA2, x, y, f));
  };
  var liftA4 = function (x, y, z, u, f) {
    return Curry._2(apply, u, liftA3(x, y, z, f));
  };
  var liftA5 = function (x, y, z, u, v, f) {
    return Curry._2(apply, v, liftA4(x, y, z, u, f));
  };
  var $less$star$great = function (f, x) {
    return Curry._2(apply, x, f);
  };
  var $star$great = Curry.__2(applySecond);
  var $less$star = Curry.__2(applyFirst);
  var $star$star = merge;
  var ApplyInfix = {
    $less$star$great: $less$star$great,
    $star$great: $star$great,
    $less$star: $less$star,
    $star$star: $star$star
  };
  return {
          map: map,
          replace: include.replace,
          $$void: include.$$void,
          FunctorInfix: include.FunctorInfix,
          $less$$great: include.$less$$great,
          $less$amp$great: include.$less$amp$great,
          $less$: $less$,
          $$great: include.$$great,
          apply: apply,
          liftA2: liftA2,
          applyFirst: applyFirst,
          applySecond: applySecond,
          ApplyInfix: ApplyInfix,
          $less$star$great: $less$star$great,
          $star$great: $star$great,
          $less$star: $less$star,
          $star$star: $star$star,
          liftA3: liftA3,
          liftA4: liftA4,
          liftA5: liftA5,
          merge: merge
        };
}

exports.S1_to_S2 = S1_to_S2;
exports.S2_to_S1 = S2_to_S1;
exports.S2_to_S3 = S2_to_S3;
exports.S3_to_S2 = S3_to_S2;
exports.MakeCustom1 = MakeCustom1;
exports.MakeCustom2 = MakeCustom2;
exports.MakeCustom3 = MakeCustom3;
exports.Make1 = Make1;
exports.Make2 = Make2;
exports.Make3 = Make3;
/* No side effect */
