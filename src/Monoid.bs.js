// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Semigroup$CoreCategory = require("./Semigroup.bs.js");

function Make0(X) {
  var empty = X.empty;
  var include = Semigroup$CoreCategory.Make0({
        combine: X.combine
      });
  return {
          empty: empty,
          combine: include.combine,
          Semigroup_infix: include.Semigroup_infix,
          $less$great: include.$less$great
        };
}

function MakeDual0(X) {
  var empty = X.empty;
  var include = Semigroup$CoreCategory.MakeDual0({
        combine: X.combine
      });
  return {
          empty: empty,
          combine: include.combine,
          Semigroup_infix: include.Semigroup_infix,
          $less$great: include.$less$great
        };
}

function Make(X) {
  var empty = X.empty;
  var include = Semigroup$CoreCategory.Make({
        combine: X.combine
      });
  return {
          empty: empty,
          combine: include.combine,
          Semigroup_infix: include.Semigroup_infix,
          $less$great: include.$less$great
        };
}

function MakeDual(X) {
  var empty = X.empty;
  var include = Semigroup$CoreCategory.MakeDual({
        combine: X.combine
      });
  return {
          empty: empty,
          combine: include.combine,
          Semigroup_infix: include.Semigroup_infix,
          $less$great: include.$less$great
        };
}

function Make2(X) {
  var empty = X.empty;
  var include = Semigroup$CoreCategory.Make2({
        combine: X.combine
      });
  return {
          empty: empty,
          combine: include.combine,
          Semigroup_infix: include.Semigroup_infix,
          $less$great: include.$less$great
        };
}

function MakeDual2(X) {
  var empty = X.empty;
  var include = Semigroup$CoreCategory.MakeDual2({
        combine: X.combine
      });
  return {
          empty: empty,
          combine: include.combine,
          Semigroup_infix: include.Semigroup_infix,
          $less$great: include.$less$great
        };
}

exports.Make0 = Make0;
exports.MakeDual0 = MakeDual0;
exports.Make = Make;
exports.MakeDual = MakeDual;
exports.Make2 = Make2;
exports.MakeDual2 = MakeDual2;
/* No side effect */
